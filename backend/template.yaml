AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: agent2_ingestor Backend API

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
    Runtime: python3.11

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'test', 'main']
    Description: 'Environment name'

Resources:
  Agent2IngestorAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'agent2-ingestor-api-${Environment}'
      CodeUri: .
      Handler: lambda_handler.handler
      Runtime: python3.11
      Timeout: 900  # 15 minutes for large file processing
      MemorySize: 3008  # Increased for handling larger files
      Policies:
        - DynamoDBCrudPolicy:
            TableName: '*'
        - S3CrudPolicy:
            BucketName: '*'
        - Statement:
          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DescribeTable
              - textract:*
              - bedrock:*
              - lambda:InvokeFunction
            Resource: '*'
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_USER_POOL_ID: us-east-1_Yk8Yt64uE
          COGNITO_CLIENT_ID: 6hcundvt29da9ap8ji973h1pqq
          S3_BUCKET: agent2-ingestor-bucket-us-east-1
          EVENT_BUS_NAME: agent2-ingestor-events-dev
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Agent2IngestorApiGateway
        RootApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Agent2IngestorApiGateway

  Agent2IngestorApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'agent2-ingestor-api-${Environment}'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        AllowCredentials: false
      EndpointConfiguration:
        Type: REGIONAL
      # Binary media types for file uploads
      BinaryMediaTypes:
        - 'multipart/form-data'
        - 'application/pdf'
        - 'application/octet-stream'

  # DynamoDB Tables with environment-specific names
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agent2_ingestor_jobs_${Environment}'
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: UserJobsIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  ApprovalsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agent2_ingestor_approvals_${Environment}'
      KeySchema:
        - AttributeName: approval_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: approval_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  UserTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'agent2_ingestor_user_tracking_${Environment}'
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: last_activity
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: LastActivityIndex
          KeySchema:
            - AttributeName: last_activity
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Agent2IngestorApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  ApiGatewayId:
    Description: "API Gateway ID"
    Value: !Ref Agent2IngestorApiGateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiId"
  
  Agent2IngestorAPIArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt Agent2IngestorAPI.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaArn"